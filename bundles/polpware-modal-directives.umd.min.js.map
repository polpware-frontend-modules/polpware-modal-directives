{"version":3,"sources":["ng://@polpware/modal-directives/lib/draggable/draggable.directive.ts","ng://@polpware/modal-directives/lib/draggable/draggable-module.ts"],"names":["polpModalDraggableDirective","element","this","prototype","ngAfterViewInit","nativeElement","handleElement","style","cursor","level","parentNode","modalElement","position","onMouseDown","event","button","target","isDraggable","topStart","clientY","Number","top","replace","leftStart","clientX","left","preventDefault","onMouseUp","onMouseMove","onMouseLeave","core","ɵɵdirectiveInject","ElementRef","selectors","hostBindings","rf","ctx","$event","ɵɵresolveDocument","PolpDraggableModule","declarations","exports"],"mappings":"yVAsBI,SAAAA,EAAmBC,GAAAC,KAAAD,QAAAA,SAGnBD,EAAAG,UAAAC,gBAAA,WACI,IAAIH,EAAUC,KAAKD,QAAQI,cAG3BH,KAAKI,cAAgBJ,KAAKD,QAAQI,cAGlCH,KAAKI,cAAcC,MAAMC,OAAS,UAGlC,IAAK,IAAIC,EAAQ,EAAGA,EAAQ,EAAGA,IAC3BR,EAAUA,EAAQS,WAGtBR,KAAKS,aAAeV,EACpBC,KAAKS,aAAaJ,MAAMK,SAAW,YAIvCZ,EAAAG,UAAAU,YADA,SACYC,GACa,IAAjBA,EAAMC,QAAiBb,KAAKI,eAAiBQ,EAAME,SAAWd,KAAKI,gBAKvEJ,KAAKe,aAAc,EAGnBf,KAAKgB,SAAWJ,EAAMK,QAAUC,OAAOlB,KAAKS,aAAaJ,MAAMc,IAAIC,QAAQ,KAAM,KACjFpB,KAAKqB,UAAYT,EAAMU,QAAUJ,OAAOlB,KAAKS,aAAaJ,MAAMkB,KAAKH,QAAQ,KAAM,KACnFR,EAAMY,mBAIV1B,EAAAG,UAAAwB,UADA,SACUb,GACNZ,KAAKe,aAAc,GAIvBjB,EAAAG,UAAAyB,YADA,SACYd,GACJZ,KAAKe,cAELf,KAAKS,aAAaJ,MAAMc,IAAOP,EAAMK,QAAUjB,KAAKgB,SAAY,KAChEhB,KAAKS,aAAaJ,MAAMkB,KAAQX,EAAMU,QAAUtB,KAAKqB,UAAa,OAK1EvB,EAAAG,UAAA0B,aADA,SACaf,GACTZ,KAAKe,aAAc,oCA3DdjB,GAA2B8B,EAAAC,kBAAAD,EAAAE,+CAA3BhC,EAA2BiC,UAAA,CAAA,CAAA,GAAA,qBAAA,KAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,gDAA3BC,EAAAvB,YAAAwB,MAAmB,WAAA,SAAAA,GAAA,OAAnBD,EAAAT,UAAAU,MAAiB,EAAAP,EAAAQ,mBAAA,aAAA,SAAAD,GAAA,OAAjBD,EAAAR,YAAAS,MAAmB,EAAAP,EAAAQ,mBAAA,cAAA,SAAAD,GAAA,OAAnBD,EAAAP,aAAAQ,MAAoB,EAAAP,EAAAQ,wCCZjC,SAAAC,4CAQaA,iEAAAA,4EAAAA,EAAmB,CAAAC,aAAA,CANxBxC,GAA2ByC,QAAA,CAG3BzC","sourcesContent":["import { Directive, ElementRef, HostListener, AfterViewInit } from '@angular/core';\n\n/*\n * Directive to add 'drag' support to Ngx Bootstrap modals (https://github.com/valor-software/ngx-bootstrap).\n * Based on this library to enable drag support for an ng-bootstrap modal: https://github.com/mattxu-zz/ngb-modal-draggable\n * https://gist.githubusercontent.com/markleusink/7af171d5f17e7dc9714e69965fdabab9/raw/ff3bdab36433f2d78c21874e6eb09b10d18a1e00/draggable.directive.ts\n *\n * Enable by adding the directive to the modal-header element, e.g.:\n *\n * <div class=\"modal-header\" ngxModalDraggable>  </div>\n */\n\n@Directive({\n    selector: '[polpModalDraggable]'\n})\nexport class polpModalDraggableDirective implements AfterViewInit {\n    private modalElement: HTMLElement;\n    private topStart: number;\n    private leftStart: number;\n    private isDraggable: boolean;\n    private handleElement: HTMLElement;\n\n    constructor(public element: ElementRef) {\n    }\n\n    ngAfterViewInit() {\n        let element = this.element.nativeElement;\n\n        //only make the modal header draggable\n        this.handleElement = this.element.nativeElement;\n\n        //change cursor on the header\n        this.handleElement.style.cursor = 'pointer';\n\n        //get the modal parent container element: that's the element we're going to move around\n        for (let level = 3; level > 0; level--) {\n            element = element.parentNode;\n        }\n\n        this.modalElement = element;\n        this.modalElement.style.position = 'relative';\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMouseDown(event: MouseEvent) {\n        if (event.button === 2 || (this.handleElement && event.target !== this.handleElement)) {\n            return; // prevents right click drag\n        }\n\n        //enable dragging\n        this.isDraggable = true;\n\n        //store original position\n        this.topStart = event.clientY - Number(this.modalElement.style.top.replace('px', ''));\n        this.leftStart = event.clientX - Number(this.modalElement.style.left.replace('px', ''));\n        event.preventDefault();\n    }\n\n    @HostListener('document:mouseup', ['$event'])\n    onMouseUp(event: MouseEvent) {\n        this.isDraggable = false;\n    }\n\n    @HostListener('document:mousemove', ['$event'])\n    onMouseMove(event: MouseEvent) {\n        if (this.isDraggable) {\n            //on moving the mouse, reposition the modal\n            this.modalElement.style.top = (event.clientY - this.topStart) + 'px';\n            this.modalElement.style.left = (event.clientX - this.leftStart) + 'px';\n        }\n    }\n\n    @HostListener('document:mouseleave', ['$event'])\n    onMouseLeave(event: MouseEvent) {\n        this.isDraggable = false;\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { polpModalDraggableDirective } from './draggable.directive';\n\n@NgModule({\n    declarations: [\n        polpModalDraggableDirective\n    ],\n    exports: [\n        polpModalDraggableDirective\n    ]\n})\nexport class PolpDraggableModule { }\n"]}